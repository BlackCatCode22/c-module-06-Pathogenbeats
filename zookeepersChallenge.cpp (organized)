#include <vector>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>

// Animal struct definition
struct Animal {
    int age;
    std::string sex;
    std::string species;
    std::string color;
    int weight;
    int birthYear;
    std::string name; 
    std::string id; // Unique identifier for each animal
};

// Hard-coded current year
const int CURRENT_YEAR = 2024;

// Define arrays for names (as per your original code)
const char* hyenaNames[] = { "Shenzi", "Banzai", "Ed", "Zig", "Bud", "Lou", "Kamari", "Wema", "Nne", "Madoa", "Prince Nevarah" };
const char* lionNames[] = { "Scar", "Mufasa", "Simba", "Kiara", "King", "Drooper", "Kimba", "Nala", "Leo", "Samson", "Elsa", "Cecil" };
const char* bearNames[] = { "Yogi", "Smokey", "Paddington", "Lippy", "Bungle", "Baloo", "Rupert", "Winnie the Pooh", "Snuggles", "Bert" };
const char* tigerNames[] = { "Tony", "Tigger", "Amber", "Cosimia", "Cuddles", "Dave", "Jiba", "Rajah", "Rayas", "Ryker" };

// Function to assign a name based on species and count
std::string assignName(const std::string& species, int count) {
    if (species == "hyena") return hyenaNames[count % (sizeof(hyenaNames) / sizeof(hyenaNames[0]))];
    if (species == "lion") return lionNames[count % (sizeof(lionNames) / sizeof(lionNames[0]))];
    if (species == "bear") return bearNames[count % (sizeof(bearNames) / sizeof(bearNames[0]))];
    if (species == "tiger") return tigerNames[count % (sizeof(tigerNames) / sizeof(tigerNames[0]))];
    return "Unnamed"; // Default name if species not found
}

// Function to parse animal details and assign a name
Animal parseAnimalDetails(const std::string& line, int& hyenaCount, int& lionCount, int& bearCount, int& tigerCount) {
    Animal animal;
    std::istringstream iss(line);

    // Extracting age
    std::string ageStr;
    iss >> ageStr;
    animal.age = std::stoi(ageStr);

    // Extracting sex
    std::string sexStr;
    iss >> sexStr >> sexStr; // Skip "old"
    iss >> animal.sex;

    // Extracting species
    std::string speciesStr;
    iss >> speciesStr;
    animal.species = speciesStr.substr(0, speciesStr.size() - 1); // Remove comma

    // Calculate birth year
    animal.birthYear = CURRENT_YEAR - animal.age;

    // Skip to color
    std::string skip;
    std::getline(iss, skip, ','); // Skip until "color"

    // Extracting color
    std::getline(iss, skip, ',');
    std::istringstream colorStream(skip);
    std::string colorLabel;
    colorStream >> colorLabel;
    animal.color = colorLabel;

    // Extracting weight
    std::string weightStr;
    std::getline(iss, weightStr);
    std::istringstream weightStream(weightStr);
    weightStream >> animal.weight;
    weightStream.ignore(6); // Ignore "pounds"

    // Assign a name based on species and count
    if (animal.species == "hyena") {
        animal.name = assignName(animal.species, hyenaCount);
        animal.id = "Hy" + std::to_string(++hyenaCount);
    }
    else if (animal.species == "lion") {
        animal.name = assignName(animal.species, lionCount);
        animal.id = "Li" + std::to_string(++lionCount);
    }
    else if (animal.species == "bear") {
        animal.name = assignName(animal.species, bearCount);
        animal.id = "Be" + std::to_string(++bearCount);
    }
    else if (animal.species == "tiger") {
        animal.name = assignName(animal.species, tigerCount);
        animal.id = "Ti" + std::to_string(++tigerCount);
    }
    else {
        animal.name = "Unnamed";
        animal.id = "XX00"; // Default ID if species not found
    }

    // Format the ID to be always two digits
    std::string idPrefix = animal.id.substr(0, 2); // Extract the prefix
    int countNumber = std::stoi(animal.id.substr(2)); // Get the count as an integer
    std::string formattedCount = (countNumber < 10 ? "0" : "") + std::to_string(countNumber); // Pad with zero if necessary
    animal.id = idPrefix + formattedCount; // Combine prefix and formatted count

    return animal;
}

int main() {
    std::ifstream file("C:/Users/patho/zookeeper'sChallenge/dataFiles/arrivingAnimals.txt");
    std::vector<Animal> animals;

    if (!file.is_open()) {
        std::cerr << "Error opening file!" << std::endl;
        return 1;
    }

    std::string line;
    int hyenaCount = 0, lionCount = 0, bearCount = 0, tigerCount = 0;

    while (std::getline(file, line)) {
        animals.push_back(parseAnimalDetails(line, hyenaCount, lionCount, bearCount, tigerCount));
    }

    file.close();

    // Define vectors for each species
    std::vector<Animal> hyenas;
    std::vector<Animal> lions;
    std::vector<Animal> bears;
    std::vector<Animal> tigers;

    // Sort animals into their respective categories
    for (const auto& animal : animals) {
        if (animal.species == "hyena") {
            hyenas.push_back(animal);
        }
        else if (animal.species == "lion") {
            lions.push_back(animal);
        }
        else if (animal.species == "bear") {
            bears.push_back(animal);
        }
        else if (animal.species == "tiger") {
            tigers.push_back(animal);
        }
    }

    // Output the categorized lists
    std::cout << "Hyenas:\n";
    for (const auto& hyena : hyenas) {
        std::cout << "ID: " << hyena.id << ", Name: " << hyena.name << ", Age: " << hyena.age
            << ", Sex: " << hyena.sex << ", Color: " << hyena.color
            << ", Weight: " << hyena.weight << " pounds\n";
    }

    std::cout << "\nLions:\n";
    for (const auto& lion : lions) {
        std::cout << "ID: " << lion.id << ", Name: " << lion.name << ", Age: " << lion.age
            << ", Sex: " << lion.sex << ", Color: " << lion.color
            << ", Weight: " << lion.weight << " pounds\n";
    }

    std::cout << "\nBears:\n";
    for (const auto& bear : bears) {
        std::cout << "ID: " << bear.id << ", Name: " << bear.name << ", Age: " << bear.age
            << ", Sex: " << bear.sex << ", Color: " << bear.color
            << ", Weight: " << bear.weight << " pounds\n";
    }

    std::cout << "\nTigers:\n";
    for (const auto& tiger : tigers) {
        std::cout << "ID: " << tiger.id << ", Name: " << tiger.name << ", Age: " << tiger.age
            << ", Sex: " << tiger.sex << ", Color: " << tiger.color
            << ", Weight: " << tiger.weight << " pounds\n";
    }

    return 0;
}
